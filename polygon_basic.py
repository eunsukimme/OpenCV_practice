# -*- coding: utf-8 -*-

# 도형 그리기는 동영상이나 이미지에서 매치되는 영역을 찾은 후에 사용자가 인식하기 쉽게 표시하는 목적으로 사용한다
import numpy as np
import cv2

# 선 그리기
# Start와 End 점을 연결하여 직선을 그린다
# cv2.line(그림 그릴 이미지 파일, 시작 좌표, 종료 좌표, BGR형태의 색, 선 두께)
img = np.zeros((512, 512, 3), np.uint8) # 모두 0(검정색) 으로 되어있는 빈 캔버스
img = cv2.line(img, (0, 0), (511, 511), (255, 0, 0), 5)

# 사각형 그리기
# 왼쪽 위부터 오른쪽 아래 까지 점을 연결하는 사각형을 그린다
# cv2.rectangle(그림 그릴 이미지, 시작 좌표, 종료 좌표, BGR형태의 색, 선 두께)
img = cv2.rectangle(img, (384, 0), (510, 128), (0, 255, 0), 3)

# 원 그리기
# cv2.circle(그림 그릴 이미지, 중심 좌표, 반지름, BGR 색, 선 두께(-1이면 원 안쪽을 채움))
img = cv2.circle(img, (200, 200), 64, (0, 0, 255), -1)

# 타원 그리기
# cv2.ellipse(이미지, 타원 중심, 중심에서 가장 큰 거리와 작은 거리, 타원 기울기 각, 타®원 시작 각도, 타원 끝나는 각도, 색, 선 두꼐)
img = cv2.ellipse(img, (256, 256), (100, 50), 0, 0, 360, 255, -1)

# 폴리곤 그리기
# cv2.polylines(이미지, 연결할 꼭지점 좌표, 닫힘 여부, 색, 선 두께)
pts = np.array([[10, 5], [20, 30], [70, 20], [50, 10]], np.int32) # 각 꼭지점은 2차원 행렬
# 이미지에 포현하기 위해 3차원 행렬로 변환. 변환 이전과 이후의 행렬 갯수는 동일해야한다
# -1은 원본에 해당하는 값을 그대로 유지
pts = pts.reshape((-1, 1, 2))
img = cv2.polylines(img, [pts], True, (0, 255, 255))

# 이미지에 Text 추가
# cv2.putText(이미지, 표시할 문자열, 표시할 위치(왼쪽 위 좌표), 폰트, 글자 크기, 색, 두께)
cv2.putText(img, 'OpenCV', (10, 500), cv2.FONT_HERSHEY_SIMPLEX, 4, (255, 255, 255), 3)


# 이미지 보기
cv2.imshow('polygons', img)
cv2.waitKey(0)
cv2.destroyAllWindows()